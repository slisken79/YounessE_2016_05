//Klassen  
  public class QuizViewModel
    {
        [Required(ErrorMessage = "Skriv ditt namn")]
        [DisplayName("Namn")]
        public string Namn { get; set; }

        [Required(ErrorMessage = "Skriv din ålder")]
        [Range(13, 99, ErrorMessage = "Ålder mellan 13 och 99 år")]
        public int? Age { get; set; }

        [Required(ErrorMessage = "Välj din favoritårstid")]
        public string FavoriteSeason { get; set; }

        [Required(ErrorMessage = "Välj ditt favoritgodis")]
        public string FavoriteCandy { get; set; }

        public string[] SeasonList = { "Vår", "Sommar", "Höst", "Vinter"};
        public string[] CandyList = { "Center", "Colaflaskor", "Plopp", "Gelehallon" };
    }
//*****************
//Kontroller
  public class HomeController : Controller
    {

        public ActionResult Index()
        {
            var model = new QuizViewModel();
            return View(model);
        }

        [HttpPost]
        public ActionResult Index(QuizViewModel model)
        {
            if (ModelState.IsValid)
            {
                return View("Thanks", model);
            }
            return View(model);
        }
  // GET: Review
        
public ActionResult Add()
       
 {
 return View(new ReviewModel());
        }
        
//Post :Review
       
 [HttpPost]
       
 public ActionResult Add(ReviewModel Model)
        {
         
   if (ModelState.IsValid)
           
 {
  return View("Added");
 }
          
  return View(Model);
   }
    }
//****************
//View index
@model MVCTestFavoritThings.Models.QuizViewModel
@{
    ViewBag.Title = "Make your Choice";
}
    <h1>Vilken är din favorit?</h1>
    @using (@Html.BeginForm())
    {
        <div style="color:red;">@Html.ValidationSummary()</div>
        <div>           
            <hr/>
            <dl class="dl-horizontal">
                <dt>
                    @Html.DisplayNameFor(model => model.Name)
                </dt>
                <dd>
                    @Html.TextBoxFor(model => model.Name)
                </dd>
                <dt>
                    @Html.DisplayNameFor(model => model.Age)
                </dt>
                <dd>
                    @Html.TextBoxFor(model => model.Age)
                </dd>
                <dt>
                    @Html.DisplayNameFor(model => model.FavoriteCandy)
                </dt>
                @foreach (var candy in Model.CandyList)
                {
                    <dd><label>@Html.RadioButtonFor(m => m.FavoriteCandy, candy)@candy</label></dd>
                }
                <dt>
                    @Html.DisplayNameFor(model => model.FavoriteSeason)
                </dt>
                <dd>
                    @Html.DropDownListFor(model => model.FavoriteSeason, new SelectList(Model.SeasonList), "(Välj en årstid)",true )
                </dd>
                <dd><input type="submit" value="Skicka"/></dd>
            </dl>
        </div>
    }
        <p>
            @Html.ActionLink("Back to List", "Index")
        </p>
      //**********************  
//Thanks view
@model MVCTestFavoritThings.Models.QuizViewModel

<div>
    <h1>Tack, @Model.Name</h1>
    <p>Du gillar @Model.FavoriteCandy och @Model.FavoriteSeason.</p>

</div>
<p>

    @Html.ActionLink("Back to List", "Index")
</p>
//****************************************************
//Kontroller för spelet SESSION
public class Game21Controller : Controller
    {
        public ActionResult Index()
        {
            return View();
        }

        // GET: Game21
        public PartialViewResult _Logic()
        {
            var game21 = new Game21();
            Session["game21"] = game21;

            return PartialView(game21);
        }

        // POST: Game21
        [HttpPost]
        public PartialViewResult _Logic(int add)
        {
            var game21 = (Game21)Session["game21"];
            game21.AddNr(add);
            return PartialView(game21);
        }
    }
//****************************************************************
//Student +Grade+ SchoolContext
    public class SchoolContext : DbContext
    {
        public DbSet<Student> Students { get; set; }
        public DbSet<Grade> Grades { get; set; }

        public SchoolContext():base ("SkolaDBTest")
        {
                Database.SetInitializer(new SchoolInitializer());
        }

    }

    internal class SchoolInitializer : DropCreateDatabaseAlways<SchoolContext>
    {
        protected override void Seed(SchoolContext ctx)
        {
            List< Student> students = new List<Student>()
            {
                new Student() {StudentId = 1, Name = "Eric", Lastname = "Pettersson", Personnumber = "781524-1545", Address = "Sandgatan 47, 25124 Lund",
                    Grades = 
                    new List<Grade>() { new Grade() { GradeId = 1, CourseName = "PHP", CourseGrade = "C"},
                    new Grade() { GradeId = 2, CourseName = "HTML", CourseGrade = "B" },
                    new Grade() { GradeId = 3, CourseName = "Javascript", CourseGrade = "A" } } }
            };
            ctx.Students.AddRange(students);
            ctx.SaveChanges();
 //foreach (var artist in artists)
 {
 ctx.Artists.Add(artist);
}
        }
    }
}
//**************************
 public class MyAttribute : ValidationAttribute
    {
        public override bool IsValid(object value)
        {
            var input = value.ToString().ToLower();
            if (input.Contains("money") || input.Contains("gun"))
            {
                return false;

            }
            return true;
        }

        public override string FormatErrorMessage(string name)
        {
            return ("Skriv annat");
        }
    }
//**********************
//TDD Klassen och metoden
 public class Calculate
    {
        public int Add(string tal1)
        {
            if (tal1 == "tio")
            {
                return 100;
            }
            //throw new NotImplementedException();
            var tal = int.Parse(tal1);
            return tal*10;
        }

        public int CalculateEnergy(string num)
        {
            var m = int.Parse(num);
            return m*5*5;
        }

    }

//*****************************Test klassen
 [TestClass]
public class CalculateTests
    {
        [TestMethod()]
        public void AddTest()
        {
            //Arrange
            var tal = new Calculate();
            //Act
            var actual = tal.Add("9");
            var expected = 90;
            //Assert
            Assert.AreEqual(actual,expected);
        }
        [TestMethod()]
        //[ExpectedException(typeof(FormatException))]
        public void AddTest2()
        {
            var tal = new Calculate();
            var actual = tal.Add("tio");
            var expected = 100;
            Assert.AreEqual(actual,expected);
        }
        [TestMethod]
        public void TestEnergy()
        {
            //Arrange
            var e = new Calculate();
            //Act
            var actual = e.CalculateEnergy("5");
            var expected = 625;
            //Assert
            Assert.AreEqual(actual, expected);
        }
    }
//******************************
//Ajax i Labb4MVC uppgit 2

*******************************
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace FloatTester
{
    public class Square
    {
        public double GetSquareNumber(string number)
        {
            var t = double.Parse(number);
            return Math.Pow(t, 2);
            //throw new NotImplementedException();
        }
    }
}

using Microsoft.VisualStudio.TestTools.UnitTesting;
using FloatTester;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace FloatTester.Tests
{
    [TestClass()]
    public class SquareTests
    {
        [TestMethod()]
        [ExpectedException(typeof(Exception))]
        public void GetSquareNumberTest_TextInString()
        {
            Square sq = new Square();
            sq.GetSquareNumber("fem");
        }
        [TestMethod()]
        [ExpectedException(typeof(Exception))]
        public void GetSquareNumberTest_NumberMultiplyNumberFault()
        {
            Square sq = new Square();
            sq.GetSquareNumber("2*2");
        }
        [TestMethod()]
        [ExpectedException(typeof(Exception))]
        public void GetSquareNumberTest_EmptyString()
        {
            Square sq = new Square();
            sq.GetSquareNumber("");
        }
        [TestMethod()]
        [ExpectedException(typeof(Exception))]
        public void GetSquareNumberTest_NumberTextFault()
        {
            Square sq = new Square();
            sq.GetSquareNumber("7d");
        }
        [TestMethod()]
        [ExpectedException(typeof(NullReferenceException))]
        public void GetSquareNumberTest_NullFault()
        {
            Square sq = new Square();
            sq.GetSquareNumber(null);
        }






        [TestMethod]
        public void GetSquareNumberTest_Correct()
        {
            var sq = new Square();
            var actual = sq.GetSquareNumber("0.8");
            var expected = 0.64;
            Assert.AreEqual(actual, expected, "0.8 test Correct");
        }
        [TestMethod]
        public void GetSquareNumberTest_CorrectWithComma()
        {
            var sq = new Square();
            var actual = sq.GetSquareNumber("0,9");
            var expected = 0.81;
            Assert.AreEqual(actual, expected, "0,9 test Correct");
        }
        [TestMethod]
        public void GetSquareNumberTest_SpaceNumberCorrect()
        {
            var sq = new Square();
            var actual = sq.GetSquareNumber(" 9");
            var expected = 81;
            Assert.AreEqual(actual, expected, "space + number test Correct");
        }
        [TestMethod]
        public void GetSquareNumberTest_NumberSpaceCorrect()
        {
            var sq = new Square();
            var actual = sq.GetSquareNumber("9 ");
            var expected = 81;
            Assert.AreEqual(actual, expected, "number + space  test Correct");
        }
        [TestMethod]
        public void GetSquareNumberTest_MillionWithSpaceCorrect()
        {
            var sq = new Square();
            var actual = sq.GetSquareNumber("1 000");
            var expected = 1000000;
            Assert.AreEqual(actual, expected, "Million + space  test Correct");
        }
        [TestMethod]
        public void GetSquareNumberTest_XerroCorrect()
        {
            var sq = new Square();
            var actual = sq.GetSquareNumber("0");
            var expected = 0;
            Assert.AreEqual(actual, expected, "Zero  test Correct");
        }
        [TestMethod]
        public void GetSquareNumberTest_NegativeNumberCorrect()
        {
            var sq = new Square();
            var actual = sq.GetSquareNumber("-8");
            var expected = 64;
            Assert.AreEqual(actual, expected, "Negative number  test Correct");
        }
